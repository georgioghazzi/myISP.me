{"version":3,"sources":["../../src/pages/scan-qr/scan-qr.module.ts","../../src/pages/scan-qr/scan-qr.ts","../../node_modules/@ionic-native/qr-scanner/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACT;AAUvC;IAAA;IAA+B,CAAC;IAAnB,gBAAgB;QAR5B,+DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,4DAAU;aACX;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,4DAAU,CAAC;aACrC;SACF,CAAC;OACW,gBAAgB,CAAG;IAAD,uBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;ACZa;AACe;AACa;AAItE;;;;;GAKG;AAOH;IAEE,oBAAmB,OAAsB,EAAS,SAAoB,EAAW,SAAoB;QAArG,iBAwBC;QAxBkB,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QAAW,cAAS,GAAT,SAAS,CAAW;QACnG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;aACvB,IAAI,CAAC,UAAC,MAAuB;YAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBACtB,gCAAgC;gBAGhC,iBAAiB;gBACjB,IAAI,SAAO,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC,UAAC,IAAY;oBACzD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;oBAEvC,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,sBAAsB;oBAC7C,SAAO,CAAC,WAAW,EAAE,CAAC,CAAC,gBAAgB;gBACzC,CAAC,CAAC,CAAC;YAEL,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzB,2CAA2C;gBAC3C,sFAAsF;gBACtF,gDAAgD;YAClD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,gGAAgG;YAClG,CAAC;QACJ,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,CAAM,IAAK,cAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,EAA1B,CAA0B,CAAC,CAAC;IACjD,CAAC;IAED,mCAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAC3C,CAAC;IACD,yBAAI,GAAJ;IAEF,CAAC;IAjCY,UAAU;QAJtB,gEAAS,CAAC;YACT,QAAQ,EAAE,cAAc;WACG;SAC5B,CAAC;mBAGqG;OAF1F,UAAU,CAmCtB;IAAD,CAAC;AAAA;SAnCY,UAAU,gB;;;;;;;;AClBvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AAC2C;AAC6B;AAC3B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,kCAAkC;AAClC,WAAW;AACX;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,kBAAkB;AAClB;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS,OAAO,yDAAU,EAAE;AAC5B;AACA;AACA,QAAQ,2EAAO;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wCAAwC,2DAAU;AAClD;AACA;AACA,QAAQ,2EAAO;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ,2EAAO;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,sCAAsC;AACtC,eAAe;AACf;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAM;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC,CAAC,6EAAiB;AACE;AACrB,iC","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ScanQrPage } from './scan-qr';\n\n@NgModule({\n  declarations: [\n    ScanQrPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(ScanQrPage),\n  ],\n})\nexport class ScanQrPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/scan-qr/scan-qr.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { QRScanner, QRScannerStatus } from '@ionic-native/qr-scanner';\nimport { BarcodeScanner } from '@ionic-native/barcode-scanner';\n\n\n/**\n * Generated class for the ScanQrPage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage()\n@Component({\n  selector: 'page-scan-qr',\n  templateUrl: 'scan-qr.html',\n})\nexport class ScanQrPage {\n\n  constructor(public navCtrl: NavController, public navParams: NavParams , private qrScanner: QRScanner) {\n    this.qrScanner.prepare()\n    .then((status: QRScannerStatus) => {\n       if (status.authorized) {\n         // camera permission was granted\n  \n  \n         // start scanning\n         let scanSub = this.qrScanner.scan().subscribe((text: string) => {\n           console.log('Scanned something', text);\n  \n           this.qrScanner.hide(); // hide camera preview\n           scanSub.unsubscribe(); // stop scanning\n         });\n  \n       } else if (status.denied) {\n         // camera permission was permanently denied\n         // you must use QRScanner.openSettings() method to guide the user to the settings page\n         // then they can grant the permission from there\n       } else {\n         // permission was denied, but not permanently. You can ask for permission again at a later time.\n       }\n    })\n    .catch((e: any) => console.log('Error is', e));\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad ScanQrPage');\n  }\n  scan(){\n\n}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/scan-qr/scan-qr.ts","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n/**\n * @name QR Scanner\n * @description\n * A fast, energy efficient, highly-configurable QR code scanner for Cordova apps.\n *\n * Requires Cordova plugin: `cordova-plugin-qrscanner`. For more info, please see the [QR Scanner plugin docs](https://github.com/bitpay/cordova-plugin-qrscanner).\n *\n * @usage\n * ```typescript\n * import { QRScanner, QRScannerStatus } from '@ionic-native/qr-scanner';\n *\n *\n * constructor(private qrScanner: QRScanner) { }\n *\n * ...\n *\n * // Optionally request the permission early\n * this.qrScanner.prepare()\n *   .then((status: QRScannerStatus) => {\n *      if (status.authorized) {\n *        // camera permission was granted\n *\n *\n *        // start scanning\n *        let scanSub = this.qrScanner.scan().subscribe((text: string) => {\n *          console.log('Scanned something', text);\n *\n *          this.qrScanner.hide(); // hide camera preview\n *          scanSub.unsubscribe(); // stop scanning\n *        });\n *\n *      } else if (status.denied) {\n *        // camera permission was permanently denied\n *        // you must use QRScanner.openSettings() method to guide the user to the settings page\n *        // then they can grant the permission from there\n *      } else {\n *        // permission was denied, but not permanently. You can ask for permission again at a later time.\n *      }\n *   })\n *   .catch((e: any) => console.log('Error is', e));\n *\n *\n * ```\n * @interfaces\n * QRScannerStatus\n */\nvar QRScanner = (function (_super) {\n    __extends(QRScanner, _super);\n    function QRScanner() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Request permission to use QR scanner.\n     * @return {Promise<QRScannerStatus>}\n     */\n    /**\n       * Request permission to use QR scanner.\n       * @return {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.prepare = /**\n       * Request permission to use QR scanner.\n       * @return {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\n     * @return {Observable<string>} returns an Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\n     */\n    /**\n       * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\n       * @return {Observable<string>} returns an Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\n       */\n    QRScanner.prototype.scan = /**\n       * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\n       * @return {Observable<string>} returns an Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\n       */\n    function () {\n        return;\n    };\n    /**\n     * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM elements to transparent, allowing the webview to re-render with the transparent background.\n     * @returns {Promise<QRScannerStatus>}\n     */\n    /**\n       * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM elements to transparent, allowing the webview to re-render with the transparent background.\n       * @returns {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.show = /**\n       * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM elements to transparent, allowing the webview to re-render with the transparent background.\n       * @returns {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Configures the native webview to be opaque with a white background, covering the video preview.\n     * @returns {Promise<QRScannerStatus>}\n     */\n    /**\n       * Configures the native webview to be opaque with a white background, covering the video preview.\n       * @returns {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.hide = /**\n       * Configures the native webview to be opaque with a white background, covering the video preview.\n       * @returns {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Enable the device's light (for scanning in low-light environments).\n     * @returns {Promise<QRScannerStatus>}\n     */\n    /**\n       * Enable the device's light (for scanning in low-light environments).\n       * @returns {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.enableLight = /**\n       * Enable the device's light (for scanning in low-light environments).\n       * @returns {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Destroy the scanner instance.\n     * @returns {Promise<QRScannerStatus>}\n     */\n    /**\n       * Destroy the scanner instance.\n       * @returns {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.destroy = /**\n       * Destroy the scanner instance.\n       * @returns {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Disable the device's light.\n     * @return {Promise<QRScannerStatus>}\n     */\n    /**\n       * Disable the device's light.\n       * @return {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.disableLight = /**\n       * Disable the device's light.\n       * @return {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Use front camera\n     * @return {Promise<QRScannerStatus>}\n     */\n    /**\n       * Use front camera\n       * @return {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.useFrontCamera = /**\n       * Use front camera\n       * @return {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Use back camera\n     * @return {Promise<QRScannerStatus>}\n     */\n    /**\n       * Use back camera\n       * @return {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.useBackCamera = /**\n       * Use back camera\n       * @return {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Set camera to be used.\n     * @param camera {number} Provide `0` for back camera, and `1` for front camera.\n     * @return {Promise<QRScannerStatus>}\n     */\n    /**\n       * Set camera to be used.\n       * @param camera {number} Provide `0` for back camera, and `1` for front camera.\n       * @return {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.useCamera = /**\n       * Set camera to be used.\n       * @param camera {number} Provide `0` for back camera, and `1` for front camera.\n       * @return {Promise<QRScannerStatus>}\n       */\n    function (camera) {\n        return;\n    };\n    /**\n     * Pauses the video preview on the current frame and pauses scanning.\n     * @return {Promise<QRScannerStatus>}\n     */\n    /**\n       * Pauses the video preview on the current frame and pauses scanning.\n       * @return {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.pausePreview = /**\n       * Pauses the video preview on the current frame and pauses scanning.\n       * @return {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Resumse the video preview and resumes scanning.\n     * @return {Promise<QRScannerStatus>}\n     */\n    /**\n       * Resumse the video preview and resumes scanning.\n       * @return {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.resumePreview = /**\n       * Resumse the video preview and resumes scanning.\n       * @return {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Returns permission status\n     * @return {Promise<QRScannerStatus>}\n     */\n    /**\n       * Returns permission status\n       * @return {Promise<QRScannerStatus>}\n       */\n    QRScanner.prototype.getStatus = /**\n       * Returns permission status\n       * @return {Promise<QRScannerStatus>}\n       */\n    function () {\n        return;\n    };\n    /**\n     * Opens settings to edit app permissions.\n     */\n    /**\n       * Opens settings to edit app permissions.\n       */\n    QRScanner.prototype.openSettings = /**\n       * Opens settings to edit app permissions.\n       */\n    function () { };\n    QRScanner.decorators = [\n        { type: Injectable },\n    ];\n    __decorate([\n        Cordova({\n            callbackStyle: 'node'\n        }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"prepare\", null);\n    __decorate([\n        Cordova({\n            callbackStyle: 'node',\n            observable: true,\n            clearFunction: 'cancelScan'\n        }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Observable)\n    ], QRScanner.prototype, \"scan\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"show\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"hide\", null);\n    __decorate([\n        Cordova({\n            callbackStyle: 'node'\n        }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"enableLight\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"destroy\", null);\n    __decorate([\n        Cordova({\n            callbackStyle: 'node'\n        }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"disableLight\", null);\n    __decorate([\n        Cordova({\n            callbackStyle: 'node'\n        }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"useFrontCamera\", null);\n    __decorate([\n        Cordova({\n            callbackStyle: 'node'\n        }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"useBackCamera\", null);\n    __decorate([\n        Cordova({\n            callbackStyle: 'node'\n        }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number]),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"useCamera\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"pausePreview\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"resumePreview\", null);\n    __decorate([\n        Cordova(),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", Promise)\n    ], QRScanner.prototype, \"getStatus\", null);\n    __decorate([\n        Cordova({\n            sync: true\n        }),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], QRScanner.prototype, \"openSettings\", null);\n    /**\n     * @name QR Scanner\n     * @description\n     * A fast, energy efficient, highly-configurable QR code scanner for Cordova apps.\n     *\n     * Requires Cordova plugin: `cordova-plugin-qrscanner`. For more info, please see the [QR Scanner plugin docs](https://github.com/bitpay/cordova-plugin-qrscanner).\n     *\n     * @usage\n     * ```typescript\n     * import { QRScanner, QRScannerStatus } from '@ionic-native/qr-scanner';\n     *\n     *\n     * constructor(private qrScanner: QRScanner) { }\n     *\n     * ...\n     *\n     * // Optionally request the permission early\n     * this.qrScanner.prepare()\n     *   .then((status: QRScannerStatus) => {\n     *      if (status.authorized) {\n     *        // camera permission was granted\n     *\n     *\n     *        // start scanning\n     *        let scanSub = this.qrScanner.scan().subscribe((text: string) => {\n     *          console.log('Scanned something', text);\n     *\n     *          this.qrScanner.hide(); // hide camera preview\n     *          scanSub.unsubscribe(); // stop scanning\n     *        });\n     *\n     *      } else if (status.denied) {\n     *        // camera permission was permanently denied\n     *        // you must use QRScanner.openSettings() method to guide the user to the settings page\n     *        // then they can grant the permission from there\n     *      } else {\n     *        // permission was denied, but not permanently. You can ask for permission again at a later time.\n     *      }\n     *   })\n     *   .catch((e: any) => console.log('Error is', e));\n     *\n     *\n     * ```\n     * @interfaces\n     * QRScannerStatus\n     */\n    QRScanner = __decorate([\n        Plugin({\n            pluginName: 'QRScanner',\n            plugin: 'cordova-plugin-qrscanner',\n            pluginRef: 'QRScanner',\n            repo: 'https://github.com/bitpay/cordova-plugin-qrscanner',\n            platforms: ['Android', 'Browser', 'iOS', 'Windows']\n        })\n    ], QRScanner);\n    return QRScanner;\n}(IonicNativePlugin));\nexport { QRScanner };\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic-native/qr-scanner/index.js\n// module id = 427\n// module chunks = 0"],"sourceRoot":""}